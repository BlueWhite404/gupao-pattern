1.饿汉式
优点：类加载时就去初始化，没有线程安全问题，不能通过new创建实例
缺点：1.能通过反射和序列化的方式破坏单例（能解决）
      2.类加载时就去创建对象，可能会生成不需要用到的对象，占用空间

2.简单懒汉式
优点：需要时才去创建对象，不会浪费空间
缺点：1.线程安全问题，多个线程同时使用时可能会出现多个实例对象，破坏单例
      2.能通过反射和序列化的方式破坏单例（能解决）

3.懒汉式二（双重校验锁-doublecheck）
优点：解决了简单懒汉式的线程安全问题
缺点：1.加入了synchronized关键字，一定程度上影响效率
      2.能通过反射和序列化的方式破坏单例（能解决）
      
4.懒汉式三（静态内部类-innserclass）
优点：没有影响效率的synchronized的关键字，也不会有线程安全问题
缺点：能通过反射和序列化的方式破坏单例（能解决）

5.枚举
优点：枚举不能通过反射和序列化破坏单例
缺点：没发现（老师如果看到这里可以告诉我）

反射破坏单例的解决办法（代码中有体现）：
在单例私有的构造方法中添加判断，判断该单例对象是否已经存在，如果存在则不让其再初始化对象

序列化破坏单例的解决办法（代码中有体现）：
在单例中写一个readResolve()方法，返回该单例对象,如下
private object readResolve(){
   return obj;
}
